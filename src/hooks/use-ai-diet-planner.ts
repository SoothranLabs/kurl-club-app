import { useState, useCallback, useEffect } from 'react';
import { useDietCalculator } from './use-diet-calculator';
import {
  generateAIDietPlan,
  type DietPlanResponse,
} from '@/services/ai-diet-planner';
import type {
  Goal,
  ActivityKey,
  Vitals,
  BloodPanels,
  DiabeticPanel,
} from './use-diet-calculator';

type ThyroidPanel = { tsh?: number; ft4?: number; meds?: string };
type LipidPanel = { ldl?: number; hdl?: number; tg?: number };
type BPPanel = { systolic?: number; diastolic?: number };
type RenalPanel = { egfr?: number; creatinine?: number };

interface UseAIDietPlannerProps {
  vitals: Vitals;
  goal: Goal;
  activityKey: ActivityKey;
  bodyFatPct?: number;
  dietaryPreference: string;
  bloodFlags: BloodPanels;
  panels: {
    diabetic?: DiabeticPanel;
    thyroid?: ThyroidPanel;
    lipid?: LipidPanel;
    bp?: BPPanel;
    renal?: RenalPanel;
  };
  notes?: string;
}

export const useAIDietPlanner = (props: UseAIDietPlannerProps) => {
  const [useAI, setUseAI] = useState(true);
  const [aiData, setAiData] = useState<DietPlanResponse | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [hasInitialized, setHasInitialized] = useState(false);

  // Fallback to manual calculations
  const manualData = useDietCalculator({
    vitals: props.vitals,
    goal: props.goal,
    activityKey: props.activityKey,
    bloodFlags: props.bloodFlags,
    diabetic: props.panels.diabetic || {},
  });

  const generateAIPlan = useCallback(
    async (autoFallback = false) => {
      setIsGenerating(true);
      setError(null);

      try {
        const result = await generateAIDietPlan(props);
        setAiData(result);
        setUseAI(true);
      } catch (err) {
        const errorMessage =
          err instanceof Error ? err.message : 'Failed to generate AI plan';
        setError(errorMessage);

        if (autoFallback) {
          // Auto-fallback to manual mode on initialization
          setUseAI(false);
          console.warn(
            'AI diet plan failed, falling back to manual calculations:',
            errorMessage
          );
        } else {
          // Keep AI mode for manual retries
          setUseAI(true);
        }
      } finally {
        setIsGenerating(false);
        setHasInitialized(true);
      }
    },
    [props]
  );

  const toggleMode = useCallback(() => {
    setUseAI(!useAI);
  }, [useAI]);

  // Initialize without auto-generating
  useEffect(() => {
    if (!hasInitialized) {
      setHasInitialized(true);
    }
  }, [hasInitialized]);

  // Return AI data if available and selected, otherwise manual data
  const currentData =
    useAI && aiData
      ? aiData
      : {
          bmr: manualData.bmr,
          tdee: manualData.tdee,
          calories: manualData.calories,
          proteinG: manualData.proteinG,
          carbsG: manualData.carbsG,
          fatG: manualData.fatG,
          chartData: manualData.chartData,
          prescriptionText: '', // Will be generated by existing utils
        };

  return {
    ...currentData,
    useAI,
    hasAiData: !!aiData,
    isGenerating,
    error,
    hasInitialized,
    generateAIPlan: () => generateAIPlan(false), // false = don't auto-fallback on manual retry
    toggleMode,
  };
};
